{"name":"Eng","tagline":"2d game library for go","body":"# eng v0.2.0\r\n\r\nA 2D game library for go. Expect bugs and major API changes. Just a proof of concept at the moment.\r\n\r\n## Desktop Build\r\n\r\nThe desktop backend depends on [glfw](http://github.com/go-gl/glfw).\r\n* Ubuntu: apt-get install glfw3\r\n* OSX: brew tap homebrew/versions; brew install glfw3\r\n* Windows: download the [glfw3](http://www.glfw.org/docs/latest/) binaries, then drop the GL directory into C:\\MinGW\\include (64bit: C:\\MinGW\\mingw-w64-x86_6\\include) and the library files into C:\\MinGW\\lib (64bit: C:\\MinGW\\mingw-w64-x86_6\\lib). You will then need to install glfw.dll system wide or have it in the directory with your game.\r\n\r\n## Web Build\r\n\r\nThe web backend depends on [gopherjs](http://github.com/neelance/gopherjs). eng comes with a utility for quickly testing out your games in the browser.\r\n\r\n`go get github.com/ajhager/eng/srv`\r\n\r\nRun `srv` in the same directory as your game, with your static files in a directory named 'data'. Access http://localhost:8080/ if your game file is at ./main.go. Any other file name can be accessed at http://localhost:8080/name, where 'name' would be name.go.\r\n\r\nYou can supply a custom flags to srv:\r\n\r\n`\r\nUsage of srv:\r\n\t-host=\"127.0.0.1\": The host at which to serve your games\r\n\t-port=8080: The port at which to serve your games\r\n\t-static=\"data\": The relative path to your assets\r\n`\r\n\r\n## Install\r\n\r\n`go get github.com/ajhager/eng`\r\n\r\n## Documentation\r\n\r\n[godoc.org](http://godoc.org/github.com/ajhager/eng)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}